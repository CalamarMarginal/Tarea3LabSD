// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: adminDNSpb.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateNomDomDNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nombre   string `protobuf:"bytes,1,opt,name=nombre,proto3" json:"nombre,omitempty"`
	IpCreado string `protobuf:"bytes,2,opt,name=ipCreado,proto3" json:"ipCreado,omitempty"`
}

func (x *CreateNomDomDNS) Reset() {
	*x = CreateNomDomDNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adminDNSpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNomDomDNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNomDomDNS) ProtoMessage() {}

func (x *CreateNomDomDNS) ProtoReflect() protoreflect.Message {
	mi := &file_adminDNSpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNomDomDNS.ProtoReflect.Descriptor instead.
func (*CreateNomDomDNS) Descriptor() ([]byte, []int) {
	return file_adminDNSpb_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNomDomDNS) GetNombre() string {
	if x != nil {
		return x.Nombre
	}
	return ""
}

func (x *CreateNomDomDNS) GetIpCreado() string {
	if x != nil {
		return x.IpCreado
	}
	return ""
}

type UpdateNomDomDNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NombreDom  string `protobuf:"bytes,1,opt,name=nombreDom,proto3" json:"nombreDom,omitempty"`
	TipoCambio string `protobuf:"bytes,2,opt,name=tipoCambio,proto3" json:"tipoCambio,omitempty"`
	ValorNuevo string `protobuf:"bytes,3,opt,name=valorNuevo,proto3" json:"valorNuevo,omitempty"`
}

func (x *UpdateNomDomDNS) Reset() {
	*x = UpdateNomDomDNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adminDNSpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNomDomDNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNomDomDNS) ProtoMessage() {}

func (x *UpdateNomDomDNS) ProtoReflect() protoreflect.Message {
	mi := &file_adminDNSpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNomDomDNS.ProtoReflect.Descriptor instead.
func (*UpdateNomDomDNS) Descriptor() ([]byte, []int) {
	return file_adminDNSpb_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateNomDomDNS) GetNombreDom() string {
	if x != nil {
		return x.NombreDom
	}
	return ""
}

func (x *UpdateNomDomDNS) GetTipoCambio() string {
	if x != nil {
		return x.TipoCambio
	}
	return ""
}

func (x *UpdateNomDomDNS) GetValorNuevo() string {
	if x != nil {
		return x.ValorNuevo
	}
	return ""
}

type DeleteNomDomDNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NombreDel string `protobuf:"bytes,1,opt,name=nombreDel,proto3" json:"nombreDel,omitempty"`
}

func (x *DeleteNomDomDNS) Reset() {
	*x = DeleteNomDomDNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adminDNSpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNomDomDNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNomDomDNS) ProtoMessage() {}

func (x *DeleteNomDomDNS) ProtoReflect() protoreflect.Message {
	mi := &file_adminDNSpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNomDomDNS.ProtoReflect.Descriptor instead.
func (*DeleteNomDomDNS) Descriptor() ([]byte, []int) {
	return file_adminDNSpb_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteNomDomDNS) GetNombreDel() string {
	if x != nil {
		return x.NombreDel
	}
	return ""
}

type DnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack string `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *DnsResponse) Reset() {
	*x = DnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adminDNSpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsResponse) ProtoMessage() {}

func (x *DnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adminDNSpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsResponse.ProtoReflect.Descriptor instead.
func (*DnsResponse) Descriptor() ([]byte, []int) {
	return file_adminDNSpb_proto_rawDescGZIP(), []int{3}
}

func (x *DnsResponse) GetAck() string {
	if x != nil {
		return x.Ack
	}
	return ""
}

var File_adminDNSpb_proto protoreflect.FileDescriptor

var file_adminDNSpb_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x4e, 0x53, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x45, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x44, 0x4e, 0x53, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x6d, 0x62, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x43, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x43, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x22, 0x6f, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x44, 0x6f, 0x6d,
	0x44, 0x4e, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x44, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x44, 0x6f,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x6f, 0x43, 0x61, 0x6d, 0x62, 0x69, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x70, 0x6f, 0x43, 0x61, 0x6d, 0x62, 0x69,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x4e, 0x75, 0x65, 0x76, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x4e, 0x75, 0x65, 0x76,
	0x6f, 0x22, 0x2f, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x44, 0x6f,
	0x6d, 0x44, 0x4e, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x44,
	0x65, 0x6c, 0x22, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x63, 0x6b, 0x32, 0xc5, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x4e, 0x53,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x44, 0x4e, 0x53, 0x43, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x44, 0x4e, 0x53, 0x1a, 0x12, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x4e, 0x53, 0x55,
	0x70, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x44, 0x4e, 0x53, 0x1a, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x4e, 0x53, 0x44, 0x6c, 0x12, 0x16, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x44,
	0x6f, 0x6d, 0x44, 0x4e, 0x53, 0x1a, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x02, 0x5a, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_adminDNSpb_proto_rawDescOnce sync.Once
	file_adminDNSpb_proto_rawDescData = file_adminDNSpb_proto_rawDesc
)

func file_adminDNSpb_proto_rawDescGZIP() []byte {
	file_adminDNSpb_proto_rawDescOnce.Do(func() {
		file_adminDNSpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_adminDNSpb_proto_rawDescData)
	})
	return file_adminDNSpb_proto_rawDescData
}

var file_adminDNSpb_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_adminDNSpb_proto_goTypes = []interface{}{
	(*CreateNomDomDNS)(nil), // 0: admin.createNomDomDNS
	(*UpdateNomDomDNS)(nil), // 1: admin.updateNomDomDNS
	(*DeleteNomDomDNS)(nil), // 2: admin.deleteNomDomDNS
	(*DnsResponse)(nil),     // 3: admin.dnsResponse
}
var file_adminDNSpb_proto_depIdxs = []int32{
	0, // 0: admin.AdminDNSService.AdminDNSCr:input_type -> admin.createNomDomDNS
	1, // 1: admin.AdminDNSService.AdminDNSUp:input_type -> admin.updateNomDomDNS
	2, // 2: admin.AdminDNSService.AdminDNSDl:input_type -> admin.deleteNomDomDNS
	3, // 3: admin.AdminDNSService.AdminDNSCr:output_type -> admin.dnsResponse
	3, // 4: admin.AdminDNSService.AdminDNSUp:output_type -> admin.dnsResponse
	3, // 5: admin.AdminDNSService.AdminDNSDl:output_type -> admin.dnsResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_adminDNSpb_proto_init() }
func file_adminDNSpb_proto_init() {
	if File_adminDNSpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_adminDNSpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNomDomDNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adminDNSpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNomDomDNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adminDNSpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNomDomDNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adminDNSpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adminDNSpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_adminDNSpb_proto_goTypes,
		DependencyIndexes: file_adminDNSpb_proto_depIdxs,
		MessageInfos:      file_adminDNSpb_proto_msgTypes,
	}.Build()
	File_adminDNSpb_proto = out.File
	file_adminDNSpb_proto_rawDesc = nil
	file_adminDNSpb_proto_goTypes = nil
	file_adminDNSpb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminDNSServiceClient is the client API for AdminDNSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminDNSServiceClient interface {
	// admin envia comando -> dns recibe
	AdminDNSCr(ctx context.Context, in *CreateNomDomDNS, opts ...grpc.CallOption) (*DnsResponse, error)
	AdminDNSUp(ctx context.Context, in *UpdateNomDomDNS, opts ...grpc.CallOption) (*DnsResponse, error)
	AdminDNSDl(ctx context.Context, in *DeleteNomDomDNS, opts ...grpc.CallOption) (*DnsResponse, error)
}

type adminDNSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminDNSServiceClient(cc grpc.ClientConnInterface) AdminDNSServiceClient {
	return &adminDNSServiceClient{cc}
}

func (c *adminDNSServiceClient) AdminDNSCr(ctx context.Context, in *CreateNomDomDNS, opts ...grpc.CallOption) (*DnsResponse, error) {
	out := new(DnsResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminDNSService/AdminDNSCr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDNSServiceClient) AdminDNSUp(ctx context.Context, in *UpdateNomDomDNS, opts ...grpc.CallOption) (*DnsResponse, error) {
	out := new(DnsResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminDNSService/AdminDNSUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminDNSServiceClient) AdminDNSDl(ctx context.Context, in *DeleteNomDomDNS, opts ...grpc.CallOption) (*DnsResponse, error) {
	out := new(DnsResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminDNSService/AdminDNSDl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminDNSServiceServer is the server API for AdminDNSService service.
type AdminDNSServiceServer interface {
	// admin envia comando -> dns recibe
	AdminDNSCr(context.Context, *CreateNomDomDNS) (*DnsResponse, error)
	AdminDNSUp(context.Context, *UpdateNomDomDNS) (*DnsResponse, error)
	AdminDNSDl(context.Context, *DeleteNomDomDNS) (*DnsResponse, error)
}

// UnimplementedAdminDNSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdminDNSServiceServer struct {
}

func (*UnimplementedAdminDNSServiceServer) AdminDNSCr(context.Context, *CreateNomDomDNS) (*DnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDNSCr not implemented")
}
func (*UnimplementedAdminDNSServiceServer) AdminDNSUp(context.Context, *UpdateNomDomDNS) (*DnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDNSUp not implemented")
}
func (*UnimplementedAdminDNSServiceServer) AdminDNSDl(context.Context, *DeleteNomDomDNS) (*DnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDNSDl not implemented")
}

func RegisterAdminDNSServiceServer(s *grpc.Server, srv AdminDNSServiceServer) {
	s.RegisterService(&_AdminDNSService_serviceDesc, srv)
}

func _AdminDNSService_AdminDNSCr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNomDomDNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDNSServiceServer).AdminDNSCr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminDNSService/AdminDNSCr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDNSServiceServer).AdminDNSCr(ctx, req.(*CreateNomDomDNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDNSService_AdminDNSUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNomDomDNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDNSServiceServer).AdminDNSUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminDNSService/AdminDNSUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDNSServiceServer).AdminDNSUp(ctx, req.(*UpdateNomDomDNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminDNSService_AdminDNSDl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNomDomDNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminDNSServiceServer).AdminDNSDl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminDNSService/AdminDNSDl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminDNSServiceServer).AdminDNSDl(ctx, req.(*DeleteNomDomDNS))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminDNSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminDNSService",
	HandlerType: (*AdminDNSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminDNSCr",
			Handler:    _AdminDNSService_AdminDNSCr_Handler,
		},
		{
			MethodName: "AdminDNSUp",
			Handler:    _AdminDNSService_AdminDNSUp_Handler,
		},
		{
			MethodName: "AdminDNSDl",
			Handler:    _AdminDNSService_AdminDNSDl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adminDNSpb.proto",
}
