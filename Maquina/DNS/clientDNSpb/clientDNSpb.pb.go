// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: clientDNSpb.proto

package clientdns

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClienteDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeComplete string `protobuf:"bytes,1,opt,name=timeComplete,proto3" json:"timeComplete,omitempty"`
}

func (x *ClienteDNSRequest) Reset() {
	*x = ClienteDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientDNSpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClienteDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClienteDNSRequest) ProtoMessage() {}

func (x *ClienteDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientDNSpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClienteDNSRequest.ProtoReflect.Descriptor instead.
func (*ClienteDNSRequest) Descriptor() ([]byte, []int) {
	return file_clientDNSpb_proto_rawDescGZIP(), []int{0}
}

func (x *ClienteDNSRequest) GetTimeComplete() string {
	if x != nil {
		return x.TimeComplete
	}
	return ""
}

type ClientDNSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log   string `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	Reloj string `protobuf:"bytes,2,opt,name=reloj,proto3" json:"reloj,omitempty"`
}

func (x *ClientDNSResponse) Reset() {
	*x = ClientDNSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientDNSpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDNSResponse) ProtoMessage() {}

func (x *ClientDNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientDNSpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDNSResponse.ProtoReflect.Descriptor instead.
func (*ClientDNSResponse) Descriptor() ([]byte, []int) {
	return file_clientDNSpb_proto_rawDescGZIP(), []int{1}
}

func (x *ClientDNSResponse) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ClientDNSResponse) GetReloj() string {
	if x != nil {
		return x.Reloj
	}
	return ""
}

type ClientDNSRequestConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log string `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	Zf  string `protobuf:"bytes,2,opt,name=zf,proto3" json:"zf,omitempty"`
}

func (x *ClientDNSRequestConfirmation) Reset() {
	*x = ClientDNSRequestConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientDNSpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDNSRequestConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDNSRequestConfirmation) ProtoMessage() {}

func (x *ClientDNSRequestConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_clientDNSpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDNSRequestConfirmation.ProtoReflect.Descriptor instead.
func (*ClientDNSRequestConfirmation) Descriptor() ([]byte, []int) {
	return file_clientDNSpb_proto_rawDescGZIP(), []int{2}
}

func (x *ClientDNSRequestConfirmation) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ClientDNSRequestConfirmation) GetZf() string {
	if x != nil {
		return x.Zf
	}
	return ""
}

type ClientDNSResponseConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack string `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *ClientDNSResponseConfirmation) Reset() {
	*x = ClientDNSResponseConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientDNSpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDNSResponseConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDNSResponseConfirmation) ProtoMessage() {}

func (x *ClientDNSResponseConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_clientDNSpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDNSResponseConfirmation.ProtoReflect.Descriptor instead.
func (*ClientDNSResponseConfirmation) Descriptor() ([]byte, []int) {
	return file_clientDNSpb_proto_rawDescGZIP(), []int{3}
}

func (x *ClientDNSResponseConfirmation) GetAck() string {
	if x != nil {
		return x.Ack
	}
	return ""
}

var File_clientDNSpb_proto protoreflect.FileDescriptor

var file_clientDNSpb_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x4e, 0x53, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6e, 0x73, 0x22, 0x37,
	0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x6c, 0x6f, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x6c, 0x6f, 0x6a, 0x22, 0x40, 0x0a, 0x1c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x4e,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x7a, 0x66, 0x22, 0x31, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x32, 0xcb, 0x01, 0x0a, 0x10, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x4e, 0x53, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x64, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x44,
	0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x64, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x4e, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x64, 0x6e, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x28, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x64, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x4e,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x02, 0x5a, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_clientDNSpb_proto_rawDescOnce sync.Once
	file_clientDNSpb_proto_rawDescData = file_clientDNSpb_proto_rawDesc
)

func file_clientDNSpb_proto_rawDescGZIP() []byte {
	file_clientDNSpb_proto_rawDescOnce.Do(func() {
		file_clientDNSpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientDNSpb_proto_rawDescData)
	})
	return file_clientDNSpb_proto_rawDescData
}

var file_clientDNSpb_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_clientDNSpb_proto_goTypes = []interface{}{
	(*ClienteDNSRequest)(nil),             // 0: clientdns.ClienteDNSRequest
	(*ClientDNSResponse)(nil),             // 1: clientdns.ClientDNSResponse
	(*ClientDNSRequestConfirmation)(nil),  // 2: clientdns.ClientDNSRequestConfirmation
	(*ClientDNSResponseConfirmation)(nil), // 3: clientdns.ClientDNSResponseConfirmation
}
var file_clientDNSpb_proto_depIdxs = []int32{
	0, // 0: clientdns.ClientDNSService.ClientDNS:input_type -> clientdns.ClienteDNSRequest
	2, // 1: clientdns.ClientDNSService.ClientDNSConfirmation:input_type -> clientdns.ClientDNSRequestConfirmation
	1, // 2: clientdns.ClientDNSService.ClientDNS:output_type -> clientdns.ClientDNSResponse
	3, // 3: clientdns.ClientDNSService.ClientDNSConfirmation:output_type -> clientdns.ClientDNSResponseConfirmation
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_clientDNSpb_proto_init() }
func file_clientDNSpb_proto_init() {
	if File_clientDNSpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clientDNSpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClienteDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientDNSpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientDNSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientDNSpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientDNSRequestConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientDNSpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientDNSResponseConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientDNSpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clientDNSpb_proto_goTypes,
		DependencyIndexes: file_clientDNSpb_proto_depIdxs,
		MessageInfos:      file_clientDNSpb_proto_msgTypes,
	}.Build()
	File_clientDNSpb_proto = out.File
	file_clientDNSpb_proto_rawDesc = nil
	file_clientDNSpb_proto_goTypes = nil
	file_clientDNSpb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClientDNSServiceClient is the client API for ClientDNSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientDNSServiceClient interface {
	// el DNS1 envía un mensaje cuando se cumplio los 5 minutos y recibe
	ClientDNS(ctx context.Context, in *ClienteDNSRequest, opts ...grpc.CallOption) (*ClientDNSResponse, error)
	// nodo dominante envia su log y reloj actualizado y recibe un ack por partes de los otros DNS
	ClientDNSConfirmation(ctx context.Context, in *ClientDNSRequestConfirmation, opts ...grpc.CallOption) (*ClientDNSResponseConfirmation, error)
}

type clientDNSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientDNSServiceClient(cc grpc.ClientConnInterface) ClientDNSServiceClient {
	return &clientDNSServiceClient{cc}
}

func (c *clientDNSServiceClient) ClientDNS(ctx context.Context, in *ClienteDNSRequest, opts ...grpc.CallOption) (*ClientDNSResponse, error) {
	out := new(ClientDNSResponse)
	err := c.cc.Invoke(ctx, "/clientdns.ClientDNSService/ClientDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDNSServiceClient) ClientDNSConfirmation(ctx context.Context, in *ClientDNSRequestConfirmation, opts ...grpc.CallOption) (*ClientDNSResponseConfirmation, error) {
	out := new(ClientDNSResponseConfirmation)
	err := c.cc.Invoke(ctx, "/clientdns.ClientDNSService/ClientDNSConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientDNSServiceServer is the server API for ClientDNSService service.
type ClientDNSServiceServer interface {
	// el DNS1 envía un mensaje cuando se cumplio los 5 minutos y recibe
	ClientDNS(context.Context, *ClienteDNSRequest) (*ClientDNSResponse, error)
	// nodo dominante envia su log y reloj actualizado y recibe un ack por partes de los otros DNS
	ClientDNSConfirmation(context.Context, *ClientDNSRequestConfirmation) (*ClientDNSResponseConfirmation, error)
}

// UnimplementedClientDNSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientDNSServiceServer struct {
}

func (*UnimplementedClientDNSServiceServer) ClientDNS(context.Context, *ClienteDNSRequest) (*ClientDNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDNS not implemented")
}
func (*UnimplementedClientDNSServiceServer) ClientDNSConfirmation(context.Context, *ClientDNSRequestConfirmation) (*ClientDNSResponseConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDNSConfirmation not implemented")
}

func RegisterClientDNSServiceServer(s *grpc.Server, srv ClientDNSServiceServer) {
	s.RegisterService(&_ClientDNSService_serviceDesc, srv)
}

func _ClientDNSService_ClientDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClienteDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDNSServiceServer).ClientDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientdns.ClientDNSService/ClientDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDNSServiceServer).ClientDNS(ctx, req.(*ClienteDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDNSService_ClientDNSConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDNSRequestConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDNSServiceServer).ClientDNSConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientdns.ClientDNSService/ClientDNSConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDNSServiceServer).ClientDNSConfirmation(ctx, req.(*ClientDNSRequestConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientDNSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientdns.ClientDNSService",
	HandlerType: (*ClientDNSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientDNS",
			Handler:    _ClientDNSService_ClientDNS_Handler,
		},
		{
			MethodName: "ClientDNSConfirmation",
			Handler:    _ClientDNSService_ClientDNSConfirmation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientDNSpb.proto",
}
